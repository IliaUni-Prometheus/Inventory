@page "/regions/{RegionId?}"
@using ClientSide.Data
@inject IOrderService orderService

<h3>Regions</h3>

<button type="button" @onclick="@Rerender">Rerender</button>
<button type="button" @onclick="@AlertBrowser">Alert Browser</button>
<button type="button" @onclick="@SetColor">Set Color</button>
<button type="button" @onclick="@GetColor">Get Color</button>

<h2>@Color</h2>

@foreach (var state in States)
{
    <h1> @state</h1>
}

@code {

    [Parameter]
    public string? RegionId { get; set; }

    public string? Color { get; set; }

    private List<string> States = new List<string>();

    [Inject]
    public IJSRuntime JSRuntime { get; set; } = null;

    public async Task AlertBrowser()
    {
        await JSRuntime.InvokeVoidAsync("messageBox", "Blazor is fantastic");
    }

    public async Task SetColor()
    {
        await orderService.All(1);

        await JSRuntime.InvokeVoidAsync("setColorInStorage", "Red");
    }

    public async Task GetColor()
    {
        Color = await JSRuntime.InvokeAsync<string>("getColorFromStorage");
    }

    protected override Task OnInitializedAsync()
    {
        States.Add("OnInitializedAsync");

        return base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        States.Add("OnAfterRenderAsync");

        return base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnParametersSetAsync()
    {
        States.Add("OnParametersSetAsync");

        return base.OnParametersSetAsync();
    }

    private void Rerender()
    {
        StateHasChanged();
    }
}
